// Copyright 2020 Torben Schinke
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package gen

import (
	"fmt"
	"go/format"
	"strconv"
	"strings"
)

type newImportName string
type origImportPath string

type GoGenFile struct {
	name         string
	importPath   string
	namedImports map[origImportPath]newImportName
	sb           *strings.Builder
	indent       int
	newLine      bool
}

func NewGoGenFile(importPath, generatorName string) *GoGenFile {
	return &GoGenFile{sb: &strings.Builder{}, importPath: importPath, namedImports: make(map[origImportPath]newImportName), name: generatorName}
}

func (w *GoGenFile) Import(importPath string) string {
	if importPath == w.importPath || importPath == "" {
		return ""
	}
	newImport, has := w.namedImports[origImportPath(importPath)]
	if has {
		return string(newImport)
	}

	for i := 1; i > 0; i++ {
		newName := lastName(importPath)
		if i > 1 {
			newName += strconv.Itoa(i)
		}
		if !w.HasImportAlias(newName) {
			w.namedImports[origImportPath(importPath)] = newImportName(newName)
			return newName
		}
	}
	panic("unreachable")
}

func (w *GoGenFile) ImportName(importPath string, name string) string {
	renamedImport := w.Import(importPath)
	if renamedImport == "" {
		return name
	}
	return renamedImport + "." + name
}

func (w *GoGenFile) HasImport(importPath string) bool {
	_, has := w.namedImports[origImportPath(importPath)]
	return has
}

func (w *GoGenFile) HasImportAlias(importPath string) bool {
	alias := lastName(importPath)
	for _, v := range w.namedImports {
		if string(v) == alias {
			return true
		}
	}
	return false
}

func (w *GoGenFile) Indent(i int) {
	w.indent += i
}

func (w *GoGenFile) ShiftLeft() {
	w.Indent(-2)
}

func (w *GoGenFile) ShiftRight() {
	w.Indent(2)
}

func (w *GoGenFile) Printf(str string, args ...interface{}) {
	if w.newLine {
		for i := 0; i < w.indent; i++ {
			w.sb.WriteByte(' ')
		}
	}
	w.sb.WriteString(fmt.Sprintf(str, args...))
	w.newLine = strings.HasSuffix(str, "\n")
}

func (w *GoGenFile) String() string {
	pkgname := lastName(w.importPath)
	tmp := &strings.Builder{}
	tmp.WriteString(fmt.Sprintf("// Code generated by %s. DO NOT EDIT.\n\n", w.name))
	tmp.WriteString("package " + pkgname + "\n\n")
	tmp.WriteString("import (\n")
	for importPath, importName := range w.namedImports {
		tmp.WriteString(string(importName) + " \"" + string(importPath) + "\"\n")
	}
	tmp.WriteString(")\n")
	tmp.WriteString(w.sb.String())
	return tmp.String()
}

func (w *GoGenFile) FormatString() string {
	b, err := format.Source([]byte(w.String()))
	if err != nil {
		fmt.Println(enumerateText(w.String()))
		panic(err)
	}
	return string(b)
}

func lastName(text string) string {
	tokens := strings.Split(text, "/")
	pkgname := text
	if len(tokens) > 0 {
		pkgname = tokens[len(tokens)-1]
	}
	return pkgname
}

func enumerateText(text string) string {
	sb := &strings.Builder{}
	lines := strings.Split(text, "\n")
	for i, line := range lines {
		sb.WriteString(strconv.Itoa(i+1) + ": " + line + "\n")
	}
	return sb.String()
}
